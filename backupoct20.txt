#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

void byte_flip(uint8_t *horizontal, uint8_t *vertical)
{
    memset(vertical, 0x00, 8);
    for(uint8_t i=0; i<8; i++)
    {
        for(uint8_t b=0; b<8; b++)
        {
            vertical[i] |= (horizontal[b] & (1<<i)) ? (1<<b) : 0;
        }
    }
}

void collect_horizontal(uint8_t *horizontal, uint8_t *data, uint16_t rowsize,uint16_t yPtr,uint16_t xPtr, uint16_t start, uint32_t width)
{
    for(uint8_t i=0; i<8; i++)
    {
        if(color1){
            horizontal[i]= data[-i * rowsize - yPtr * 8 * rowsize + xPtr + start];//if black is 1 do nothing
        }else{
            horizontal[i]= ~data[-i * rowsize - yPtr * 8 * rowsize + xPtr + start];//if white is 1 we need to adjust the value of the padding
        }
    }
}

void print_data(uint8_t *vertPix, FILE *printFile, uint16_t rowWidth, uint16_t height)
{
    static uint16_t PrintedTotal = 0;//total numbers printed
    static uint16_t PrintedRow = 0;//numbers printed on the current row
    const int printPerRow = 10;  //limit per row, change this if you want
    for(uint8_t i=0; i<8; i++)
    {
        fprintf(printFile,"0x%.2x",vertPix[7-i]);
        if(!(++PrintedTotal % rowWidth))
        {
            if(PrintedTotal/8==height)
            {
                fprintf(printFile,"\n\t}\n}");
            }else{
                fprintf(printFile,"\n\t},\n\t{");
                PrintedRow=-1;
            }
        }else{
            fprintf(printFile,", ");
        }
        PrintedRow++;
        if(!(PrintedRow % printPerRow)){ fprintf(printFile,"\n\t "); PrintedRow=0;}
    }
}


int main(void)
{
    uint8_t addHeight;
    uint16_t addBytes = 0;
    uint8_t vertPix[8];
    uint8_t horPix[8];
    uint32_t Header[40];
    uint16_t fileType[1];
    char fileName[40] = "lfs.BMP";
    char fileName2[40]; //extra string to store the filename without .BMP on the end
    FILE*bmpIn=fopen(fileName,"r");
    uint8_t len = strlen(fileName);
    strxfrm(fileName2, fileName, len-4);//cutting off .bmp
    fread(fileType, 2, 1, bmpIn);
    if(fileType[0]!=0x4D42)
    {
        printf("Error file version is not BM");
        return 0;
    }
    fread(Header, 4, 15, bmpIn);
    //uint32_t fileSize = *Header;//file size in bytes
    uint32_t offset = Header[2];//offset for start of bitmap data
    uint32_t headerSize = Header[3];//check to see if this is 40
    if(headerSize!=40)
    {
        printf("Error header size not 40 bytes");
        return 0;
    }
    uint32_t width = Header[4];
    uint32_t height = Header[5];
    uint32_t bitsPP = Header[6] & 0xFFFF;//bits per pixel
    if(bitsPP>1)
    {
        printf("Error: Bits per pixel not 1");
        return 0;
    }
    uint32_t sizeBM = Header[8];
    //uint32_t numberOfColors = Header[11];
    uint32_t color1 = Header[13];
    FILE*printFile = fopen("output.txt", "w");
    if((color1&0xFFFFFFFFFFFF)==0){
        color1=0;//white is color 1
        fprintf(printFile,"white1");
    }else{
        color1=1;//black is color 1
        fprintf(printFile,"black1");
    }
    fseek(bmpIn, offset, SEEK_SET);//move to offset for bitmap data
    uint8_t *data;
    uint8_t rowsize = width / 32;
    if(width % 32) rowsize++;
    rowsize *= 4;//rowsize is the number of bytes per row horizontally
    if(height%8)
    {
        printf("height is not divisible by 8 adding vertical 0 padding...\n");
        addHeight = 8-height%8;
        addBytes = addHeight*rowsize;
    }
    data = (uint8_t *) malloc(sizeBM+addBytes);//allocate size of bitmap bytes
    if(color1){
        memset(data, 0x00, sizeBM+addBytes);//zero when white is zero
    }else{
        memset(data, 0xff, sizeBM+addBytes);//zero when white is one
    }
    fread(data, 1, sizeBM, bmpIn);//read in all bytes
    uint16_t newHeight = height + addHeight;
    
    fprintf(printFile,"const uint8_t %s[%u][%u]={\n\t{\n\t ",fileName2, newHeight/8, rowsize*8);
    for(uint16_t yPtr=0; yPtr < newHeight / 8; yPtr++)
    {
        for(uint16_t xPtr=0; xPtr < rowsize; xPtr++)
        {
            //collect_horizontal(horPix, (uint16_t *)(yPtr * 8 * rowsize + xPtr), rowsize);
            collect_horizontal(horPix, data, rowsize, yPtr, xPtr, sizeBM+addBytes-rowsize, width);
            byte_flip(horPix, vertPix);
            print_data(vertPix, printFile, rowsize*8, newHeight);
        }
    }
    fclose(printFile);
    system("output.txt");
    free(data);
    return 0;
}
